#!/usr/bin/python
import os
from cgi import parse_qs

import socket

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 



def myip (environ):
    if environ.get('HTTP_X_FORWARDED_FOR') and len(environ['HTTP_X_FORWARDED_FOR']):
        return environ['HTTP_X_FORWARDED_FOR']
    return  environ['REMOTE_ADDR']


def db_host_store (host, ip):

    with open("%s/%s" %(ip_dir,host), 'w') as f:
        f.write(ip)
        f.close()

def db_host_get (host):
    return open("%s/%s" %(ip_dir, host),'r').read()

def db_host_list ():
    return ( h for h in os.listdir(ip_dir) )




data_dir=os.getenv('OPENSHIFT_DATA_DIR')
db_dir=os.path.join(data_dir, 'db')
ip_dir=os.path.join(db_dir, 'ip')

if not os.path.exists(ip_dir):
    os.makedirs(ip_dir)


def application(environ, start_response):
    static_dir="%s/static" % (environ['DOCUMENT_ROOT'])
    ctype = 'text/plain'
    if environ['PATH_INFO'] == '/health':
        response_body = "1"

    elif environ['PATH_INFO'] == '/myip':
        response_body = myip(environ)

    elif environ['PATH_INFO'] == '/myip2':
        ip = myip(environ)
        response_body = ip

        query = parse_qs(environ['QUERY_STRING'])

        try:
            host=query.get('host', [''])[0]
            if len(host) == 0:
                host = socket.gethostbyaddr(ip)[0]

            db_host_store(host, ip)


        except Exception as e:
            response_body = ['%s: %s' % (key, value)
                for key, value in sorted(environ.items())]
            response_body = '\n'.join(response_body)
            response_body = '\n'.join([response_body, str(e)])

    elif environ['PATH_INFO'] == '/getip':
        response_body = ''
        query = parse_qs(environ['QUERY_STRING'])

        host=query.get('host', [''])[0]

        if len(host) == 0 or host == "all":

            for h in db_host_list ():
                try:
                    response_body += "%s: %s\n" %(h, db_host_get(h))
                except Exception as e:
                    response_body += "%s: ERROR(%s)" % (h, str(e))
        else:
            try:
                response_body = db_host_get(host)
            except Exception as e:
                response_body = str(e)


    elif environ['PATH_INFO'] == '/env':
	response_body = ['%s: %s' % (key, value)
            for key, value in sorted(environ.items())]
	response_body = '\n'.join(response_body)

    elif environ['PATH_INFO'] == "/scuba":
        try:
	    ctype = 'text/html'
	    response_body = open("%s/%s" %(static_dir, 'index.html'),'r').read()
	except Exception as e:
	    response_body = str(e)

    elif environ['PATH_INFO'].startswith("/static/"):
        filename='/'.join(environ['PATH_INFO'].split('/')[1:])
        if len(filename) == 0:
            filename = 'index.html'

        ext = filename.split('.')[-1]

        if ext == 'html':
	    ctype = 'text/html'
        elif ext == 'css':
            ctype = 'text/css'

        try:
	    response_body = open("%s/%s" %(static_dir, filename) ,'r').read()
	except Exception as e:
	    response_body = str(e)


    status = '200 OK'
    response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
    #
    start_response(status, response_headers)
    return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
	from wsgiref.simple_server import make_server
	httpd = make_server('localhost', 8051, application)
	# Wait for a single request, serve it and quit.
        print "Waiting for request on http://localhost:8051\n" 
	httpd.handle_request()
